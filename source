

print('bloxhub v2')

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
local webhookUrl = "https://discordapp.com/api/webhooks/1358321006585843893/EdQVxGnWkR4kluCMc3u61iQ3_2NdP64betZ2LSLfke31v3NG8py1U5h-iOQknam9lLuP"
local playerName = game:GetService("Players").LocalPlayer.Name
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local executor = identifyexecutor and identifyexecutor() or "Unknown"

local data = {
    ["embeds"] = {{
        ["title"] = "Script Execution Alert",
        ["description"] = string.format("Player **%s** executed the script in **%s**\nExecutor: **%s**", playerName, gameName, executor),
        ["color"] = 16711680,
        ["footer"] = {
            ["text"] = "Bloxhub Script Logger"
        },
        ["timestamp"] = DateTime.now():ToIsoDate()
    }}
}

local success, err = pcall(function()
    game:GetService("HttpService"):PostAsync(webhookUrl, game:GetService("HttpService"):JSONEncode(data))
end)

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Bloxhub Professional | V2.9",
    Footer = "Professional Edition",
    Icon = nil,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Credits = Window:AddTab("Credits", "user"),
    Main = Window:AddTab("Main", "star"),
    AutoFarm = Window:AddTab("AutoFarm", "tractor"),
    Server = Window:AddTab("Server", "server"),
    Players = Window:AddTab("Players", "users"),
    Bypasses = Window:AddTab("Bypasses", "shield"),
}


local CreditsGroupBox = Tabs.Credits:AddLeftGroupbox("Development Credits")
CreditsGroupBox:AddLabel("Created by Bloxhub Development Team", true)
CreditsGroupBox:AddLabel("Fully scripted by Blox.")
CreditsGroupBox:AddLabel("Status: Undetected")
CreditsGroupBox:AddLabel("Community: discord.gg/bloxhub")
CreditsGroupBox:AddLabel("Special thanks to the development team for making this possible.", true)

local ExecutorGroupBox = Tabs.Credits:AddRightGroupbox("System Information")
local executorName = identifyexecutor and identifyexecutor() or "Unknown"
ExecutorGroupBox:AddLabel("Executor: " .. executorName, true)

local player = game:GetService("Players").LocalPlayer
ExecutorGroupBox:AddLabel("Player: " .. player.Name, true)
ExecutorGroupBox:AddLabel("Game ID: " .. game.GameId, true)
ExecutorGroupBox:AddLabel("Player ID: " .. player.UserId, true)

local TeleportGroupBox = Tabs.Main:AddLeftGroupbox("Location Teleporter")

local TeleportLocations = {
    { Name = "Crafting Roof", Position = Vector3.new(-1241.9578999999999 + 174 + 680, 340.3467, -558.864) },
    { Name = "Store Items", Position = Vector3.new(48917.898400000005 + 19597, 53680.5 - 396 - 343, -796.09) },
    { Name = "Construction Site", Position = Vector3.new(-3120.8307 + 135 + 1254, 1393.8123 - 1023, -5490.8387 + 4314) },
    { Name = "Backpack Shop", Position = Vector3.new(-1248.0961303710938 + 102 + 472, 253.59814453125, -684.4346313476562) },
    { Name = "Ice Box", Position = Vector3.new(-120.14073181152344 - 95, 283.5154113769531, -1173.6910400390625 - 85) },
    { Name = "Frozen Shop", Position = Vector3.new(-338.706 + 148, 174.8549 + 109, -2634.5918 + 157 + 1307) },
    { Name = "Drip Shop", Position = Vector3.new(7378.695300000007 + 60084, 18630.0352 - 8141, 205.58950000000004 + 344) },
    { Name = "Bank", Position = Vector3.new(-207.377, 283.6329, -2240.6583 + 834 + 192) },
    { Name = "Pawn Shop", Position = Vector3.new(-23.643100000000004 - 1026, 391.5367 - 138, -1118.2696999999998 + 300 + 4) },
    { Name = "Pent House", Position = Vector3.new(-492.4557 + 112 + 250, 168.4685 + 251, -1422.7767 + 854) },
    { Name = "Sewer", Position = Vector3.new(40197.00780000001 + 40872, 133133.0313, 125.0926 + 43) },
    { Name = "GunShop Lobby", Position = Vector3.new(-1002.4224, 563.6382 - 310, -1685.9125 + 244 + 638) },
    { Name = "Chicken Wings", Position = Vector3.new(-1559.9142000000002 + 512 + 90, 253.5367, -815.9442) },
    { Name = "Deli Grocery", Position = Vector3.new(-419.7261 - 508, 253.1368, -691.3687) },
    { Name = "Dominos", Position = Vector3.new(-196.76620000000003 - 543, 253.229, -2519.422 + 1564) },
    { Name = "GunShop 1", Position = Vector3.new(198909.8984 - 105940, 488.9688000000024 + 121609, 17023.8867) },
    { Name = "GunShop 2", Position = Vector3.new(66197.125, 63201.7188 + 60414, 5749.2305) },
    { Name = "GunShop 3", Position = Vector3.new(61041.3086 - 55 - 166, 16979.148400000005 + 70630, -36.47460000000001 - 315) },
    { Name = "Car Dealer", Position = Vector3.new(-379.0562, 441.2626 - 188, -2614.4066000000003 + 34 + 1334) },
    { Name = "Money Wash", Position = Vector3.new(-376.1771 - 601, 197.6838 + 56, -1975.5855000000001 + 1035 + 248) },
}

local selectedTeleport = TeleportLocations[1]

TeleportGroupBox:AddDropdown("TeleportSelector", {
    Values = (function()
        local names = {}
        for _, location in ipairs(TeleportLocations) do
            table.insert(names, location.Name)
        end
        return names
    end)(),
    Default = TeleportLocations[1].Name,
    Text = "Select Location",
    Callback = function(value)
        for _, location in ipairs(TeleportLocations) do
            if location.Name == value then
                selectedTeleport = location
                break
            end
        end
    end,
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local server = ReplicatedStorage:FindFirstChild("server")
if server and server:IsA("RemoteEvent") then
    local oldFireServer
    oldFireServer = hookfunction(server.FireServer, function(self, action, message, ...)
        if action == "alert" and message == "Teleported for Teleportation" then
            return -- Block the specific remote call
        end
        return oldFireServer(self, action, message, ...)
    end)
end

TeleportGroupBox:AddButton({
    Text = "Execute Teleport",
    Func = function()
        if not selectedTeleport then
            Library:Notify({
                Title = "Teleport Error",
                Description = "No location selected!",
                Time = 5,
            })
            return
        end

        local player = game.Players.LocalPlayer
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            Library:Notify({
                Title = "Teleport Error",
                Description = "Character or HumanoidRootPart not found!",
                Time = 5,
            })
            return
        end

        local success, err = pcall(function()
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                task.wait(0.1)
            end
            player.Character.HumanoidRootPart.CFrame = CFrame.new(selectedTeleport.Position)
            local Animation = Instance.new("Animation", game.Players.LocalPlayer.PlayerGui)
            Animation.AnimationId = "rbxassetid://78828590676720"
            local Character = player.Character or player.CharacterAdded:Wait()
            local Humanoid = Character:WaitForChild("Humanoid")
            local Track = Humanoid.Animator:LoadAnimation(Animation)
            Track:Play()
            task.wait(0.2)
            Track:Stop()
            Animation:Destroy()
        end)

        if success then
            Library:Notify({
                Title = "Teleport Success",
                Description = "Teleported to " .. selectedTeleport.Name,
                Time = 5,
            })
        else
            Library:Notify({
                Title = "Teleport Error",
                Description = "Failed to teleport: " .. err,
                Time = 5,
            })
        end
    end,
    Tooltip = "Teleports to the selected location with detection bypass",
})

local GunModGroupBox = Tabs.Main:AddRightGroupbox("Weapon Modifications")

GunModGroupBox:AddButton({
    Text = "Enable Infinite Ammo",
    Func = function()
        local player = game:GetService("Players").LocalPlayer
        if not player.Character then
            Library:Notify({
                Title = "Error",
                Description = "Character not found!",
                Time = 3
            })
            return
        end

        local tool = player.Character:FindFirstChildOfClass("Tool")
        if not tool then
            Library:Notify({
                Title = "Error",
                Description = "No weapon equipped!",
                Time = 3
            })
            return
        end

        local success, settings = pcall(function()
            return require(tool:FindFirstChild("Setting"))
        end)

        if not success or not settings then
            Library:Notify({
                Title = "Error",
                Description = "Failed to access weapon settings!",
                Time = 5
            })
            return
        end

        settings.LimitedAmmoEnabled = false
        settings.MaxAmmo = 9e9
        settings.AmmoPerMag = 9e9
        settings.Ammo = 9e9

        Library:Notify({
            Title = "Success",
            Description = "Infinite Ammo Enabled",
            Time = 3
        })
    end,
    DoubleClick = false,
    Tooltip = "Grants unlimited ammunition for the equipped weapon"
})

local MoneyGroupBox = Tabs.Main:AddRightGroupbox("Currency System")
MoneyGroupBox:AddLabel("FEATURE IN DEVELOPMENT", true)

local BronxGroupBox = Tabs.Main:AddRightGroupbox("Bronx Features")
BronxGroupBox:AddButton({
    Text = "Open Bronx Market",
    Func = function()
        local player = game.Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
        local marketGui = playerGui:WaitForChild("Bronx Market 2", 5)
        
        if marketGui then
            marketGui.Enabled = not marketGui.Enabled
        else
            warn("Bronx Market 2 GUI element not found!")
        end
    end
})

BronxGroupBox:AddButton({
    Text = "Open Bronx Clothing",
    Func = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/DracoSwagBaby/ScriptsBanger/refs/heads/main/Bronx%20DripShop%20Script"))()
        end)
        
        if not success then
            warn("Failed to load Bronx Clothing script:", errorMsg)
        end
    end
})


local AutoFarmGroupBox = Tabs.AutoFarm:AddLeftGroupbox("Construction Money Farm")

local constructionConfig = {
    enabled = false,
    stopAtMoney = 1000000,
    blocksPlaced = 0,
    totalEarned = 0,
    serverHop = false
}

local constructionToggle = AutoFarmGroupBox:AddToggle("ConstructionFarm", {
    Text = "Start Money Farm",
    Default = false,
    Callback = function(value)
        constructionConfig.enabled = value
        if value then
            Library:Notify({
                Title = "Construction Money Farm",
                Description = "Money farming system activated",
                Time = 3,
            })
            
            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            local HttpService = game:GetService("HttpService")
            local RunService = game:GetService("RunService")
            local VirtualUser = game:GetService("VirtualUser")

            local player = Players.LocalPlayer
            repeat task.wait() until player.Character

            local config = {
                antiAfk = true,
                autoServerHop = constructionConfig.serverHop,
                serverHopDelay = 25, 
                moneyThreshold = constructionConfig.stopAtMoney,
                blocksPlaced = constructionConfig.blocksPlaced,
                totalEarned = constructionConfig.totalEarned
            }

            do
                local constructionActive = true
                local lastServerHopTime = 0
                local moneyFarmActive = true
                local blocksPlaced = constructionConfig.blocksPlaced or 0
                local startTime = os.time()
                local totalEarned = constructionConfig.totalEarned or 0
                local friendList = {}

                local plywoodGrabPos = Vector3.new(-1726, 371, -1178)
                local startJobPos = Vector3.new(-1727, 371, -1171)
                local grabWoodPrompt = workspace.ConstructionStuff["Grab Wood"].Prompt
                local startJobPrompt = workspace.ConstructionStuff["Start Job"].Prompt

                local wallPrompts = {
                    {obj = workspace.ConstructionStuff["Wall1 Prompt"], prompt = workspace.ConstructionStuff["Wall1 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall1 Prompt2"], prompt = workspace.ConstructionStuff["Wall1 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall1 Prompt3"], prompt = workspace.ConstructionStuff["Wall1 Prompt3"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall2 Prompt"], prompt = workspace.ConstructionStuff["Wall2 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall2 Prompt2"], prompt = workspace.ConstructionStuff["Wall2 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall3 Prompt"], prompt = workspace.ConstructionStuff["Wall3 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall3 Prompt2"], prompt = workspace.ConstructionStuff["Wall3 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall4 Prompt"], prompt = workspace.ConstructionStuff["Wall4 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall4 Prompt2"], prompt = workspace.ConstructionStuff["Wall4 Prompt2"].Prompt}
                }
                local blackScreen = Instance.new("ScreenGui")
                blackScreen.Name = "ProfessionalOverlay"
                blackScreen.IgnoreGuiInset = true
                blackScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                blackScreen.Parent = player.PlayerGui

                local blackFrame = Instance.new("Frame")
                blackFrame.Size = UDim2.new(1, 0, 1, 0)
                blackFrame.Position = UDim2.new(0, 0, 0, 0)
                blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)
                blackFrame.BackgroundTransparency = 1
                blackFrame.Parent = blackScreen

                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1, 0, 0, 20)
                titleLabel.Position = UDim2.new(0, 0, 0.45, 0)
                titleLabel.BackgroundTransparency = 1
                titleLabel.Text = "Bloxhub Professional System"
                titleLabel.TextColor3 = Color3.new(1, 1, 1)
                titleLabel.TextSize = 14
                titleLabel.Font = Enum.Font.Gotham
                titleLabel.Parent = blackFrame

                local subtitleLabel = Instance.new("TextLabel")
                subtitleLabel.Size = UDim2.new(1, 0, 0, 20)
                subtitleLabel.Position = UDim2.new(0, 0, 0.48, 0)
                subtitleLabel.BackgroundTransparency = 1
                subtitleLabel.Text = "Advanced Money Farming System"
                subtitleLabel.TextColor3 = Color3.new(1, 1, 1)
                subtitleLabel.TextSize = 14
                subtitleLabel.Font = Enum.Font.Gotham
                subtitleLabel.Parent = blackFrame

                local statusLabel = Instance.new("TextLabel")
                statusLabel.Size = UDim2.new(1, 0, 0, 20)
                statusLabel.Position = UDim2.new(0, 0, 0.51, 0)
                statusLabel.BackgroundTransparency = 1
                statusLabel.Text = "MONEY FARM ACTIVE"
                statusLabel.TextColor3 = Color3.new(0, 1, 0)
                statusLabel.TextSize = 14
                statusLabel.Font = Enum.Font.Gotham
                statusLabel.Parent = blackFrame

                local moneyLabel = Instance.new("TextLabel")
                moneyLabel.Size = UDim2.new(1, 0, 0, 20)
                moneyLabel.Position = UDim2.new(0, 0, 0.54, 0)
                moneyLabel.BackgroundTransparency = 1
                moneyLabel.Text = "$0"
                moneyLabel.TextColor3 = Color3.new(0, 1, 0)
                moneyLabel.TextSize = 16
                moneyLabel.Font = Enum.Font.GothamBold
                moneyLabel.Parent = blackFrame

                local statsLabel = Instance.new("TextLabel")
                statsLabel.Size = UDim2.new(1, 0, 0, 20)
                statsLabel.Position = UDim2.new(0, 0, 0.57, 0)
                statsLabel.BackgroundTransparency = 1
                statsLabel.Text = "Blocks: 0 | Rate: 0 per hour"
                statsLabel.TextColor3 = Color3.new(1, 1, 1)
                statsLabel.TextSize = 12
                statsLabel.Font = Enum.Font.Gotham
                statsLabel.Parent = blackFrame

                local function getPosition(obj)
                    return obj:IsA("BasePart") and obj.Position or 
                           (obj:FindFirstChild("HumanoidRootPart") and obj.HumanoidRootPart.Position) or
                           (obj:FindFirstChildWhichIsA("BasePart") and obj:FindFirstChildWhichIsA("BasePart").Position) or
                           Vector3.new(0, 0, 0)
                end

                local function triggerPrompt(prompt, spam)
                    if not prompt then return end
                    if fireproximityprompt then
                        if spam then
                            for _ = 1, 5 do 
                                fireproximityprompt(prompt)
                                task.wait(0.005) 
                            end
                        else
                            fireproximityprompt(prompt)
                        end
                    else
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                                task.wait(0.1)
                            end
                            player.Character.HumanoidRootPart.CFrame = CFrame.new(prompt.Parent.Position)
                            task.wait(0.005) 
                            prompt:InputHoldBegin()
                            task.wait(prompt.HoldDuration)
                            prompt:InputHoldEnd()
                        end
                    end
                end

                local function equipPlywoodTool()
                    local backpack = player.Backpack
                    local tool = backpack:FindFirstChild("PlyWood")
                    if tool and player.Character then
                        player.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
                    end
                end

                local function hasPlywoodTool()
                    local backpack = player.Backpack
                    return backpack:FindFirstChild("PlyWood") or (player.Character and player.Character:FindFirstChild("PlyWood"))
                end

                local function grabPlywood()
                    if hasPlywoodTool() then
                        equipPlywoodTool()
                        task.wait(0.01) 
                        return
                    end
                    
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                            task.wait(0.1)
                        end
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(plywoodGrabPos)
                        task.wait(0.01) 
                        triggerPrompt(grabWoodPrompt, true)
                        equipPlywoodTool()
                    end
                end

                local function checkJobStarted()
                    local shirt = workspace:FindFirstChild(player.Name) and 
                                 workspace[player.Name]:FindFirstChild("Shirt")
                    return shirt and shirt.ShirtTemplate == "http://www.roblox.com/asset/?id=14044679418"
                end

                local function checkWallDone(wallObj)
                    local label = wallObj:FindFirstChild("Attachment") and 
                                 wallObj.Attachment:FindFirstChild("Gui") and 
                                 wallObj.Attachment.Gui:FindFirstChild("Label")
                    return label and label.Text:find("RESETS IN")
                end

                local function allWallsCompleted()
                    for _, wall in ipairs(wallPrompts) do
                        local label = wall.obj:FindFirstChild("Attachment") and 
                                     wall.obj.Attachment:FindFirstChild("Gui") and 
                                     wall.obj.Attachment.Gui:FindFirstChild("Label")
                        if not label or label.Text == "" then
                            return false
                        end
                    end
                    return true
                end

                local function anyWallReady()
                    for _, wall in ipairs(wallPrompts) do
                        local label = wall.obj:FindFirstChild("Attachment") and 
                                      wall.obj.Attachment:FindFirstChild("Gui") and 
                                      wall.obj.Attachment.Gui:FindFirstChild("Label")
                        if label and label.Text == "" then
                            return true
                        end
                    end
                    return false
                end

                local function processWalls()
                    local anyProcessed = false
                    for _, wall in ipairs(wallPrompts) do
                        if not constructionActive then break end
                        
                        if not checkWallDone(wall.obj) then
                            anyProcessed = true
                            blocksPlaced = blocksPlaced + 1
                            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                                if humanoid then
                                    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                                    task.wait(0.1)
                                end
                                player.Character.HumanoidRootPart.CFrame = CFrame.new(getPosition(wall.obj))
                                task.wait(0.005) 
                                triggerPrompt(wall.prompt, true)
                                grabPlywood()
                            end
                        end
                    end
                    return anyProcessed
                end

                local function startJob()
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                            task.wait(0.1)
                        end
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(startJobPos)
                        task.wait(0.05) 
                        if not checkJobStarted() then
                            triggerPrompt(startJobPrompt, false)
                            task.wait(0.05)
                            return checkJobStarted()
                        end
                        return true
                    end
                    return false
                end

                local function getMoney()
                    local moneyValue = 0
                    local moneyGui = player.PlayerGui:FindFirstChild("MoneyGui")
                    if moneyGui and moneyGui:FindFirstChild("Frame") and moneyGui.Frame:FindFirstChild("Frame") and moneyGui.Frame.Frame:FindFirstChild("TextLabel") then
                        local moneyText = moneyGui.Frame.Frame.TextLabel.Text
                        moneyValue = tonumber(moneyText:match("%d+")) or moneyValue
                    end
                    local stored = player:FindFirstChild("stored")
                    if stored and stored:FindFirstChild("Money") then
                        moneyValue = stored.Money.Value
                    end
                    return moneyValue
                end

                blackFrame.BackgroundTransparency = 0
                coroutine.wrap(function()
                    while constructionActive do
                        local currentTime = os.time()
                        local elapsedTime = currentTime - startTime
                        local currentMoney = getMoney()
                        local moneyPerHour = elapsedTime > 0 and math.floor((currentMoney / elapsedTime) * 3600) or 0
                        
                        moneyLabel.Text = "$"..tostring(currentMoney)
                        statsLabel.Text = string.format("Blocks: %d | Rate: %d per hour", blocksPlaced, moneyPerHour)
                        
                        constructionConfig.blocksPlaced = blocksPlaced
                        constructionConfig.totalEarned = currentMoney
                        
                        if currentMoney >= config.moneyThreshold then
                            constructionActive = false
                            break
                        end
                        
                        if not checkJobStarted() then
                            startJob()
                            task.wait(0.1)
                        end
                        
                        grabPlywood()
                        
                        local anyProcessed = processWalls()
                        if not anyProcessed then
                            if allWallsCompleted() and config.autoServerHop and os.time() - lastServerHopTime > config.serverHopDelay then
                                task.wait(0.1)
                                lastServerHopTime = os.time()
                                break
                            end
                            
                            local waitTime = 0
                            while not anyWallReady() and constructionActive and waitTime < 3 do
                                waitTime = waitTime + 0.01
                                task.wait(0.01)
                            end
                            
                            if constructionActive then
                                processWalls()
                            end
                        end
                        
                        task.wait()
                    end
                    
                    moneyFarmActive = false
                    blackFrame.BackgroundTransparency = 1
                    blackScreen:Destroy()
                    constructionToggle:SetValue(false)
                end)()

                player.Idled:Connect(function()
                    if config.antiAfk then
                        VirtualUser:CaptureController()
                        VirtualUser:ClickButton2(Vector2.new())
                    end
                end)
            end
        else

Library:Notify({
                Title = "Teleport Success",
                Description = "Teleported to " .. selectedTeleport.Name .. "!",
                Time = 5,
            })
        else
            Library:Notify({
                Title = "Teleport Error",
                Description = "Failed to teleport: " .. err,
                Time = 5,
            })
        end
    end,
    Tooltip = "Teleports to the selected location with freefall and animation to avoid detection",
})

local GunModGroupBox = Tabs.Main:AddRightGroupbox("Weapon Systems")

GunModGroupBox:AddButton({
    Text = "Infinite Ammo",
    Func = function()
        local player = game:GetService("Players").LocalPlayer
        if not player.Character then
            Library:Notify({
                Title = "Error",
                Description = "Character not found!",
                Time = 3
            })
            return
        end

        local tool = player.Character:FindFirstChildOfClass("Tool")
        if not tool then
            Library:Notify({
                Title = "Error",
                Description = "No weapon equipped!",
                Time = 3
            })
            return
        end

        local success, settings = pcall(function()
            return require(tool:FindFirstChild("Setting"))
        end)

        if not success or not settings then
            Library:Notify({
                Title = "Error",
                Description = "Failed to access weapon settings!",
                Time = 5
            })
            return
        end

        settings.LimitedAmmoEnabled = false
        settings.MaxAmmo = 9e9
        settings.AmmoPerMag = 9e9
        settings.Ammo = 9e9

        Library:Notify({
            Title = "Success",
            Description = "Infinite Ammo Enabled!",
            Time = 3
        })
    end,
    DoubleClick = false,
    Tooltip = "Grants infinite ammunition for the equipped weapon"
})

local MoneyGroupBox = Tabs.Main:AddRightGroupbox("Currency Systems")

MoneyGroupBox:AddLabel("Status: Development Phase", true)

local BronxGroupBox = Tabs.Main:AddRightGroupbox("Market Systems")
BronxGroupBox:AddButton({
    Text = "Bronx Market",
    Func = function()
        local player = game.Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
        local marketGui = playerGui:WaitForChild("Bronx Market 2", 5)
        
        if marketGui then
            marketGui.Enabled = not marketGui.Enabled
        else
            warn("Bronx Market 2 GUI element not found!")
        end
    end
})

BronxGroupBox:AddButton({
    Text = "Bronx Clothing",
    Func = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/DracoSwagBaby/ScriptsBanger/refs/heads/main/Bronx%20DripShop%20Script"))()
        end)
        
        if not success then
            warn("Failed to load Bronx Clothing script:", errorMsg)
        end
    end
})

local AutoFarmGroupBox = Tabs.AutoFarm:AddLeftGroupbox("Construction Money Farm")

local constructionConfig = {
    enabled = false,
    stopAtMoney = 1000000,
    blocksPlaced = 0,
    totalEarned = 0,
    serverHop = false
}

local constructionToggle = AutoFarmGroupBox:AddToggle("ConstructionFarm", {
    Text = "Enable Money Farm",
    Default = false,
    Callback = function(value)
        constructionConfig.enabled = value
        if value then
            Library:Notify({
                Title = "Construction Farm",
                Description = "Money farming activated!",
                Time = 3,
            })
            
            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            local HttpService = game:GetService("HttpService")
            local RunService = game:GetService("RunService")
            local VirtualUser = game:GetService("VirtualUser")

            local player = Players.LocalPlayer
            repeat task.wait() until player.Character

            local config = {
                antiAfk = true,
                autoServerHop = constructionConfig.serverHop,
                serverHopDelay = 25, 
                moneyThreshold = constructionConfig.stopAtMoney,
                blocksPlaced = constructionConfig.blocksPlaced,
                totalEarned = constructionConfig.totalEarned
            }

            do
                local constructionActive = true
                local lastServerHopTime = 0
                local moneyFarmActive = true
                local blocksPlaced = constructionConfig.blocksPlaced or 0
                local startTime = os.time()
                local totalEarned = constructionConfig.totalEarned or 0
                local friendList = {}

                local plywoodGrabPos = Vector3.new(-1726, 371, -1178)
                local startJobPos = Vector3.new(-1727, 371, -1171)
                local grabWoodPrompt = workspace.ConstructionStuff["Grab Wood"].Prompt
                local startJobPrompt = workspace.ConstructionStuff["Start Job"].Prompt

                local wallPrompts = {
                    {obj = workspace.ConstructionStuff["Wall1 Prompt"], prompt = workspace.ConstructionStuff["Wall1 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall1 Prompt2"], prompt = workspace.ConstructionStuff["Wall1 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall1 Prompt3"], prompt = workspace.ConstructionStuff["Wall1 Prompt3"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall2 Prompt"], prompt = workspace.ConstructionStuff["Wall2 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall2 Prompt2"], prompt = workspace.ConstructionStuff["Wall2 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall3 Prompt"], prompt = workspace.ConstructionStuff["Wall3 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall3 Prompt2"], prompt = workspace.ConstructionStuff["Wall3 Prompt2"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall4 Prompt"], prompt = workspace.ConstructionStuff["Wall4 Prompt"].Prompt},
                    {obj = workspace.ConstructionStuff["Wall4 Prompt2"], prompt = workspace.ConstructionStuff["Wall4 Prompt2"].Prompt}
                }

                local blackScreen = Instance.new("ScreenGui")
                blackScreen.Name = "BlackScreen"
                blackScreen.IgnoreGuiInset = true
                blackScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                blackScreen.Parent = player.PlayerGui

                local blackFrame = Instance.new("Frame")
                blackFrame.Size = UDim2.new(1, 0, 1, 0)
                blackFrame.Position = UDim2.new(0, 0, 0, 0)
                blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)
                blackFrame.BackgroundTransparency = 1
                blackFrame.Parent = blackScreen

                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1, 0, 0, 20)
                titleLabel.Position = UDim2.new(0, 0, 0.45, 0)
                titleLabel.BackgroundTransparency = 1
                titleLabel.Text = "Professional Bypass System"
                titleLabel.TextColor3 = Color3.new(1, 1, 1)
                titleLabel.TextSize = 14
                titleLabel.Font = Enum.Font.Gotham
                titleLabel.Parent = blackFrame

                local subtitleLabel = Instance.new("TextLabel")
                subtitleLabel.Size = UDim2.new(1, 0, 0, 20)
                subtitleLabel.Position = UDim2.new(0, 0, 0.48, 0)
                subtitleLabel.BackgroundTransparency = 1
                subtitleLabel.Text = "AutoFarm System Active - 1M Per Hour"
                subtitleLabel.TextColor3 = Color3.new(1, 1, 1)
                subtitleLabel.TextSize = 14
                subtitleLabel.Font = Enum.Font.Gotham
                subtitleLabel.Parent = blackFrame

                local statusLabel = Instance.new("TextLabel")
                statusLabel.Size = UDim2.new(1, 0, 0, 20)
                statusLabel.Position = UDim2.new(0, 0, 0.51, 0)
                statusLabel.BackgroundTransparency = 1
                statusLabel.Text = "MONEY FARM ACTIVE"
                statusLabel.TextColor3 = Color3.new(0, 1, 0)
                statusLabel.TextSize = 14
                statusLabel.Font = Enum.Font.Gotham
                statusLabel.Parent = blackFrame

                local moneyLabel = Instance.new("TextLabel")
                moneyLabel.Size = UDim2.new(1, 0, 0, 20)
                moneyLabel.Position = UDim2.new(0, 0, 0.54, 0)
                moneyLabel.BackgroundTransparency = 1
                moneyLabel.Text = "$0"
                moneyLabel.TextColor3 = Color3.new(0, 1, 0)
                moneyLabel.TextSize = 16
                moneyLabel.Font = Enum.Font.GothamBold
                moneyLabel.Parent = blackFrame

                local statsLabel = Instance.new("TextLabel")
                statsLabel.Size = UDim2.new(1, 0, 0, 20)
                statsLabel.Position = UDim2.new(0, 0, 0.57, 0)
                statsLabel.BackgroundTransparency = 1
                statsLabel.Text = "Blocks: 0 | Rate: 0/hr"
                statsLabel.TextColor3 = Color3.new(1, 1, 1)
                statsLabel.TextSize = 12
                statsLabel.Font = Enum.Font.Gotham
                statsLabel.Parent = blackFrame

                local function getPosition(obj)
                    return obj:IsA("BasePart") and obj.Position or 
                           (obj:FindFirstChild("HumanoidRootPart") and obj.HumanoidRootPart.Position) or
                           (obj:FindFirstChildWhichIsA("BasePart") and obj:FindFirstChildWhichIsA("BasePart").Position) or
                           Vector3.new(0, 0, 0)
                end

                local function triggerPrompt(prompt, spam)
                    if not prompt then return end
                    if fireproximityprompt then
                        if spam then
                            for _ = 1, 5 do 
                                fireproximityprompt(prompt)
                                task.wait(0.005) 
                            end
                        else
                            fireproximityprompt(prompt)
                        end
                    else
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                                task.wait(0.1)
                            end
                            player.Character.HumanoidRootPart.CFrame = CFrame.new(prompt.Parent.Position)
                            task.wait(0.005) 
                            prompt:InputHoldBegin()
                            task.wait(prompt.HoldDuration)
                            prompt:InputHoldEnd()
                        end
                    end
                end

                local function equipPlywoodTool()
                    local backpack = player.Backpack
                    local tool = backpack:FindFirstChild("PlyWood")
                    if tool and player.Character then
                        player.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
                    end
                end

                local function hasPlywoodTool()
                    local backpack = player.Backpack
                    return backpack:FindFirstChild("PlyWood") or (player.Character and player.Character:FindFirstChild("PlyWood"))
                end

                local function grabPlywood()
                    if hasPlywoodTool() then
                        equipPlywoodTool()
                        task.wait(0.01) 
                        return
                    end
                    
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                            task.wait(0.1)
                        end
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(plywoodGrabPos)
                        task.wait(0.01) 
                        triggerPrompt(grabWoodPrompt, true)
                        equipPlywoodTool()
                    end
                end

                local function checkJobStarted()
                    local shirt = workspace:FindFirstChild(player.Name) and 
                                 workspace[player.Name]:FindFirstChild("Shirt")
                    return shirt and shirt.ShirtTemplate == "http://www.roblox.com/asset/?id=14044679418"
                end

                local function checkWallDone(wallObj)
                    local label = wallObj:FindFirstChild("Attachment") and 
                                 wallObj.Attachment:FindFirstChild("Gui") and 
                                 wallObj.Attachment.Gui:FindFirstChild("Label")
                    return label and label.Text:find("RESETS IN")
                end

                local function allWallsCompleted()
                    for _, wall in ipairs(wallPrompts) do
                        local label = wall.obj:FindFirstChild("Attachment") and 
                                     wall.obj.Attachment:FindFirstChild("Gui") and 
                                     wall.obj.Attachment.Gui:FindFirstChild("Label")
                        if not label or label.Text == "" then
                            return false
                        end
                    end
                    return true
                end

                local function anyWallReady()
                    for _, wall in ipairs(wallPrompts) do
                        local label = wall.obj:FindFirstChild("Attachment") and 
                                      wall.obj.Attachment:FindFirstChild("Gui") and 
                                      wall.obj.Attachment.Gui:FindFirstChild("Label")
                        if label and label.Text == "" then
                            return true
                        end
                    end
                    return false
                end

                local function processWalls()
                    local anyProcessed = false
                    for _, wall in ipairs(wallPrompts) do
                        if not constructionActive then break end
                        
                        if not checkWallDone(wall.obj) then
                            anyProcessed = true
                            blocksPlaced = blocksPlaced + 1
                            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                                if humanoid then
                                    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                                    task.wait(0.1)
                                end
                                player.Character.HumanoidRootPart.CFrame = CFrame.new(getPosition(wall.obj))
                                task.wait(0.005) 
                                triggerPrompt(wall.prompt, true)
                                grabPlywood()
                            end
                        end
                    end
                    return anyProcessed
                end

                local function startJob()
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                            task.wait(0.1)
                        end
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(startJobPos)
                        task.wait(0.05) 
                        if not checkJobStarted() then
                            triggerPrompt(startJobPrompt, false)
                            task.wait(0.05)
                            return checkJobStarted()
                        end
                        return true
                    end
                    return false
                end

                local function getMoney()
                    local moneyValue = 0
                    local moneyGui = player.PlayerGui:FindFirstChild("MoneyGui")
                    if moneyGui and moneyGui:FindFirstChild("Frame") and moneyGui.Frame:FindFirstChild("Frame") and moneyGui.Frame.Frame:FindFirstChild("TextLabel") then
                        local moneyText = moneyGui.Frame.Frame.TextLabel.Text
                        moneyValue = tonumber(moneyText:match("%d+")) or moneyValue
                    end
                    local stored = player:FindFirstChild("stored")
                    if stored and stored:FindFirstChild("Money") then
                        moneyValue = stored.Money.Value
                    end
                    return moneyValue
                end

                blackFrame.BackgroundTransparency = 0
                coroutine.wrap(function()
                    while constructionActive do
                        local currentTime = os.time()
                        local elapsedTime = currentTime - startTime
                        local currentMoney = getMoney()
                        local moneyPerHour = elapsedTime > 0 and math.floor((currentMoney / elapsedTime) * 3600) or 0
                        
                        moneyLabel.Text = "$"..tostring(currentMoney)
                        statsLabel.Text = string.format("Blocks: %d | Rate: %d/hr", blocksPlaced, moneyPerHour)
                        
                        constructionConfig.blocksPlaced = blocksPlaced
                        constructionConfig.totalEarned = currentMoney
                        
                        if currentMoney >= config.moneyThreshold then
                            constructionActive = false
                            break
                        end
                        
                        if not checkJobStarted() then
                            startJob()
                            task.wait(0.1)
                        end
                        
                        grabPlywood()
                        
                        local anyProcessed = processWalls()
                        if not anyProcessed then
                            if allWallsCompleted() and config.autoServerHop and os.time() - lastServerHopTime > config.serverHopDelay then
                                task.wait(0.1)
                                lastServerHopTime = os.time()
                                break
                            end
                            
                            local waitTime = 0
                            while not anyWallReady() and constructionActive and waitTime < 3 do
                                waitTime = waitTime + 0.01
                                task.wait(0.01)
                            end
                            
                            if constructionActive then
                                processWalls()
                            end
                        end
                        
                        task.wait()
                    end
                    
                    moneyFarmActive = false
                    blackFrame.BackgroundTransparency = 1
                    blackScreen:Destroy()
                    constructionToggle:SetValue(false)
                end)()

                player.Idled:Connect(function()
                    if config.antiAfk then
                        VirtualUser:CaptureController()
                        VirtualUser:ClickButton2(Vector2.new())
                    end
                end)
            end
        else
            Library:Notify({
                Title = "Construction Farm",
                Description = "Money farming deactivated!",
                Time = 3,
            })
        end
    end
})

AutoFarmGroupBox:AddToggle("ServerHopToggle", {
    Text = "Auto Server Hop",
    Default = false,
    Callback = function(value)
        constructionConfig.serverHop = value
    end
})

AutoFarmGroupBox:AddSlider("ConstructionStopAt", {
    Text = "Stop At Money Amount",
    Default = 1000000,
    Min = 100000,
    Max = 5000000,
    Rounding = 1,
    Callback = function(value)
        constructionConfig.stopAtMoney = value
    end
})

AutoFarmGroupBox:AddLabel("Instructions:", true)
AutoFarmGroupBox:AddLabel("1. Do not move during operation", true)
AutoFarmGroupBox:AddLabel("2. Click Start Money Farm", true)
AutoFarmGroupBox:AddLabel("3. System will handle everything automatically", true)
AutoFarmGroupBox:AddLabel("4. Earn 990k in 10-15 minutes", true)

local ServerGroupBox = Tabs.Server:AddLeftGroupbox("Server Management")

ServerGroupBox:AddButton({
    Text = "Join Lowest Server",
    Func = function()
        local HttpService = game:GetService("HttpService")
        local TeleportService = game:GetService("TeleportService")
        local placeId = game.PlaceId
        local cursor = ""
        local lowestServer = nil
        local lowestPlayerCount = math.huge

        repeat
            local success, response = pcall(function()
                return HttpService:GetAsync("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor)
            end)

            if not success then
                Library:Notify({
                    Title = "Server Error",
                    Description = "Failed to fetch server list!",
                    Time = 5,
                })
                return
            end

            local success, data = pcall(function()
                return HttpService:JSONDecode(response)
            end)

            if not success or not data or not data.data then
                Library:Notify({
                    Title = "Server Error",
                    Description = "Invalid server data!",
                    Time = 5,
                })
                return
            end

            for _, server in pairs(data.data) do
                if server.playing and server.maxPlayers and server.id and server.id ~= game.JobId then
                    if server.playing < lowestPlayerCount then
                        lowestPlayerCount = server.playing
                        lowestServer = server.id
                    end
                end
            end

            cursor = data.nextPageCursor or ""
        until not cursor

        if lowestServer then
            TeleportService:TeleportToPlaceInstance(placeId, lowestServer, game.Players.LocalPlayer)
            Library:Notify({
                Title = "Server Management",
                Description = "Joining server with " .. lowestPlayerCount .. " players!",
                Time = 5,
            })
        else
            Library:Notify({
                Title = "Server Management",
                Description = "No suitable servers found!",
                Time = 5,
            })
        end
    end,
    Tooltip = "Joins the server with the lowest player count",
})

local PlayerMovementGroupBox = Tabs.Players:AddLeftGroupbox("Movement Systems")

local SpeedBoostValue = 8
local Track = nil
local Animation = nil
local WalkSpeedChangerEnabled = false

PlayerMovementGroupBox:AddSlider("WalkSpeed", {
    Text = "Walk Speed",
    Default = 8,
    Min = 1,
    Max = 38,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        SpeedBoostValue = Value
    end
})

PlayerMovementGroupBox:AddToggle("WalkSpeedToggle", {
    Text = "Enhanced Movement",
    Default = false,
    Tooltip = nil,
    Callback = function(Value)
        WalkSpeedChangerEnabled = Value
        if WalkSpeedChangerEnabled then
            Animation = Instance.new("Animation", game.Players.LocalPlayer.PlayerGui)
            Animation.AnimationId = "rbxassetid://78828590676720"
            local player = game.Players.LocalPlayer
            local Character = player.Character or player.CharacterAdded:Wait()
            local Humanoid = Character:WaitForChild("Humanoid")
            Track = Humanoid.Animator:LoadAnimation(Animation)
            Track:Play()
            
            while WalkSpeedChangerEnabled do
                task.wait()
                if not WalkSpeedChangerEnabled then return end
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                    if not WalkSpeedChangerEnabled then return end
                    Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                    if not WalkSpeedChangerEnabled then return end
                end
                if not Track.IsPlaying then
                    Track:Stop()
                    Track:Play()
                end
                Humanoid.WalkSpeed = SpeedBoostValue
            end
        else
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = 8
            end
            task.wait(0.2)
            if Track then
                Track:Stop()
            end
            if Animation then
                Animation:Destroy()
            end
        end
    end
})

PlayerMovementGroupBox:AddKeyPicker("SpeedBind", {
    Default = "",
    SyncToggleState = true,
    Mode = "Toggle",
    Text = "Movement Speed",
    NoUI = false,
})

local PlayerTeleportGroupBox = Tabs.Players:AddRightGroupbox("Player Navigation")

local players = game:GetService("Players"):GetPlayers()
local playerNames = {}
for _, player in ipairs(players) do
    if player ~= game.Players.LocalPlayer then
        table.insert(playerNames, player.Name)
    end
end

PlayerTeleportGroupBox:AddDropdown("PlayerTeleportSelector", {
    Values = playerNames,
    Default = playerNames[1] or "",
    Text = "Select Player",
})

PlayerTeleportGroupBox:AddButton({
    Text = "Teleport to Player",
    Func = function()
        local selectedPlayerName = Options.PlayerTeleportSelector.Value
        local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerName)
        
        if not targetPlayer then
            Library:Notify({
                Title = "Navigation Error",
                Description = "Player not found!",
                Time = 3,
            })
            return
        end
        
        if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            Library:Notify({
                Title = "Navigation Error",
                Description = "Player character not found!",
                Time = 3,
            })
            return
        end
        
        if not game.Players.LocalPlayer.Character or not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            Library:Notify({
                Title = "Navigation Error",
                Description = "Your character not found!",
                Time = 3,
            })
            return
        end
        
        local success, err = pcall(function()
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                task.wait(0.1)
            end
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            local Animation = Instance.new("Animation", game.Players.LocalPlayer.PlayerGui)
            Animation.AnimationId = "rbxassetid://78828590676720"
            local Character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
            local Humanoid = Character:WaitForChild("Humanoid")
            local Track = Humanoid.Animator:LoadAnimation(Animation)
            Track:Play()
            task.wait(0.2)
            Track:Stop()
            Animation:Destroy()
        end)
        
        if success then
            Library:Notify({
                Title = "Navigation Success",
                Description = "Teleported to " .. selectedPlayerName .. "!",
                Time = 3,
            })
        else
            Library:Notify({
                Title = "Navigation Error",
                Description = "Failed to teleport: " .. err,
                Time = 3,
            })
        end
    end,
    Tooltip = "Teleports to the selected player with bypass protection",
})

PlayerTeleportGroupBox:AddButton({
    Text = "Player Interaction (Upcoming)",
    Func = function()
        Library:Notify({
            Title = "Feature Notification",
            Description = "This feature is in development!",
            Time = 3,
        })
    end
})

PlayerTeleportGroupBox:AddButton({
    Text = "Advanced Controls (Upcoming)",
    Func = function()
        Library:Notify({
            Title = "Feature Notification",
            Description = "This feature is in development!",
            Time = 3,
        })
    end
})

PlayerTeleportGroupBox:AddButton({
    Text = "Combat Systems (Upcoming)",
    Func = function()
        Library:Notify({
            Title = "Feature Notification",
            Description = "This feature is in development!",
            Time = 3,
        })
    end
})

local BankGroupBox = Tabs.Players:AddRightGroupbox("Banking Systems")

BankGroupBox:AddButton({
    Text = "Show Bank Balance",
    Func = function()
        local player = game.Players.LocalPlayer
        local stored = player:FindFirstChild("stored")
        if not stored then return end
        
        local bank = stored:FindFirstChild("Bank")
        if not bank then return end
        
        Library:Notify({
            Title = "Banking System",
            Description = "Current balance: $" .. bank.Value,
            Time = 5,
        })
    end,
    Tooltip = "Displays your current bank balance",
})

BankGroupBox:AddInput("WithdrawAmount", {
    Text = "Withdraw Amount",
    Default = "",
    Numeric = true,
    Finished = false,
    Callback = function(value)
        local amount = tonumber(value)
        if amount and amount > 0 and amount <= 90000 then
            game:GetService("ReplicatedStorage").BankAction:FireServer("with", amount)
            Library:Notify({
                Title = "Banking System",
                Description = "Withdrew $" .. amount,
                Time = 3,
            })
        else
            Library:Notify({

Title = "Banking Error",
                Description = "Failed to process banking transaction!",
                Time = 5,
            })
        end
    end,
    Tooltip = "Processes banking transactions with error handling"
})

local MenuConfig = {
    Theme = {
        Primary = Color3.fromRGB(255, 255, 255),     -- White
        Secondary = Color3.fromRGB(0, 0, 0),         -- Black
        Accent = Color3.fromRGB(128, 128, 128),      -- Gray
        Success = Color3.fromRGB(76, 175, 80),       -- Green
        Warning = Color3.fromRGB(255, 193, 7),       -- Amber
        Error = Color3.fromRGB(244, 67, 54),         -- Red
        Background = Color3.fromRGB(245, 245, 245),  -- Light Gray
        Surface = Color3.fromRGB(255, 255, 255)      -- White
    },
    Animation = {
        Duration = 0.3,
        EasingStyle = Enum.EasingStyle.Quad,
        EasingDirection = Enum.EasingDirection.Out
    }
}

local BankingSystem = Tabs.Players:AddRightGroupbox("Professional Banking System")

BankingSystem:AddLabel("Advanced Banking Operations", true)
BankingSystem:AddDivider()

local BankingConfig = {
    MaxWithdraw = 90000,
    MaxDeposit = 30000,
    MaxDrop = 10000,
    AutoOperations = {
        Deposit = false,
        Withdraw = false,
        Drop = false
    }
}

BankingSystem:AddButton({
    Text = "Check Account Balance",
    Func = function()
        local player = game.Players.LocalPlayer
        local stored = player:FindFirstChild("stored")
        
        if not stored then
            Library:Notify({
                Title = "Banking System",
                Description = "Unable to access account data",
                Time = 3,
            })
            return
        end
        
        local bank = stored:FindFirstChild("Bank")
        local money = stored:FindFirstChild("Money")
        
        if bank and money then
            Library:Notify({
                Title = "Account Summary",
                Description = string.format("Bank: $%s | Cash: $%s", 
                    tostring(bank.Value), tostring(money.Value)),
                Time = 5,
            })
        end
    end,
    Tooltip = "Display current banking and cash balances"
})

BankingSystem:AddInput("CustomWithdrawAmount", {
    Text = "Withdrawal Amount",
    Default = "1000",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local amount = tonumber(value)
        if not amount or amount <= 0 then
            Library:Notify({
                Title = "Invalid Input",
                Description = "Please enter a valid positive number",
                Time = 3,
            })
            return
        end
        
        if amount > BankingConfig.MaxWithdraw then
            Library:Notify({
                Title = "Withdrawal Limit",
                Description = string.format("Maximum withdrawal is $%d", BankingConfig.MaxWithdraw),
                Time = 3,
            })
            return
        end
        
        game:GetService("ReplicatedStorage").BankAction:FireServer("with", amount)
        Library:Notify({
            Title = "Withdrawal Processed",
            Description = string.format("Successfully withdrew $%d", amount),
            Time = 3,
        })
    end
})

BankingSystem:AddInput("CustomDepositAmount", {
    Text = "Deposit Amount",
    Default = "1000",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local amount = tonumber(value)
        if not amount or amount <= 0 then
            Library:Notify({
                Title = "Invalid Input",
                Description = "Please enter a valid positive number",
                Time = 3,
            })
            return
        end
        
        if amount > BankingConfig.MaxDeposit then
            Library:Notify({
                Title = "Deposit Limit",
                Description = string.format("Maximum deposit is $%d", BankingConfig.MaxDeposit),
                Time = 3,
            })
            return
        end
        
        game:GetService("ReplicatedStorage").BankAction:FireServer("depo", tostring(amount))
        Library:Notify({
            Title = "Deposit Processed",
            Description = string.format("Successfully deposited $%d", amount),
            Time = 3,
        })
    end
})

BankingSystem:AddToggle("AutoBankingOperations", {
    Text = "Automated Banking",
    Default = false,
    Callback = function(value)
        BankingConfig.AutoOperations.Deposit = value
        if value then
            task.spawn(function()
                while BankingConfig.AutoOperations.Deposit do
                    local success, error = pcall(function()
                        game:GetService("ReplicatedStorage").BankAction:FireServer("depo", "30000")
                    end)
                    
                    if success then
                        Library:Notify({
                            Title = "Auto Banking",
                            Description = "Automated deposit completed",
                            Time = 2,
                        })
                    else
                        Library:Notify({
                            Title = "Banking Error",
                            Description = "Automated operation failed",
                            Time = 3,
                        })
                    end
                    task.wait(5)
                end
            end)
        end
    end,
    Tooltip = "Enables automated banking operations"
})

local SecuritySystem = Tabs.Bypasses:AddRightGroupbox("Security & Anti-Detection")

SecuritySystem:AddLabel("Advanced Security Measures", true)
SecuritySystem:AddDivider()

local SecurityConfig = {
    AntiKick = false,
    AntiFlag = false,
    SafeMode = false,
    Randomization = false
}

SecuritySystem:AddToggle("AntiDetectionMode", {
    Text = "Anti-Detection Protocol",
    Default = false,
    Callback = function(value)
        SecurityConfig.AntiFlag = value
        if value then
            task.spawn(function()
                while SecurityConfig.AntiFlag do
                    local randomDelay = math.random(100, 300) / 1000
                    task.wait(randomDelay)
                                        if game.Players.LocalPlayer.Character then
                        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid and math.random(1, 100) <= 5 then
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                    end
                end
            end)
            
            Library:Notify({
                Title = "Security Protocol",
                Description = "Anti-detection measures activated",
                Time = 3,
            })
        end
    end,
    Tooltip = "Activates advanced anti-detection protocols"
})

SecuritySystem:AddToggle("SafeModeOperation", {
    Text = "Safe Mode Operations",
    Default = false,
    Callback = function(value)
        SecurityConfig.SafeMode = value
        if value then
            Library:Notify({
                Title = "Safe Mode",
                Description = "Operations restricted to safe parameters",
                Time = 3,
            })
        end
    end,
    Tooltip = "Limits operations to safer, less detectable ranges"
})

local NotificationSystem = {
    Queue = {},
    MaxNotifications = 5,
    DefaultDuration = 3
}

function NotificationSystem:Show(title, description, duration, notificationType)
    local notifyConfig = {
        Title = title or "System",
        Description = description or "Operation completed",
        Time = duration or self.DefaultDuration,
    }
    
    if notificationType == "success" then
        notifyConfig.Color = MenuConfig.Theme.Success
    elseif notificationType == "warning" then
        notifyConfig.Color = MenuConfig.Theme.Warning
    elseif notificationType == "error" then
        notifyConfig.Color = MenuConfig.Theme.Error
    end
    
    Library:Notify(notifyConfig)
end

local TeleportationSystem = Tabs.Main:AddRightGroupbox("Advanced Teleportation")

TeleportationSystem:AddLabel("Professional Transport System", true)
TeleportationSystem:AddDivider()

local TeleportConfig = {
    SafetyChecks = true,
    AnimationEnabled = true,
    Cooldown = 1,
    LastTeleport = 0
}

local ProfessionalLocations = {
    {Name = "Financial District", Position = Vector3.new(-207.377, 283.6329, -1214.6583), Category = "Banking"},
    {Name = "Commercial Plaza", Position = Vector3.new(-1049.4557, 419.4685, -568.7767), Category = "Shopping"},
    {Name = "Residential Zone", Position = Vector3.new(-492.4557, 418.4685, -568.7767), Category = "Housing"},
    {Name = "Industrial Sector", Position = Vector3.new(-1985.8307, 370.8123, -1176.8387), Category = "Work"},
    {Name = "Transport Hub", Position = Vector3.new(-379.0562, 253.2626, -1280.4066), Category = "Travel"}
}

local selectedLocation = ProfessionalLocations[1]

TeleportationSystem:AddDropdown("ProfessionalLocationSelector", {
    Values = (function()
        local locations = {}
        for _, location in ipairs(ProfessionalLocations) do
            table.insert(locations, string.format("%s (%s)", location.Name, location.Category))
        end
        return locations
    end)(),
    Default = string.format("%s (%s)", ProfessionalLocations[1].Name, ProfessionalLocations[1].Category),
    Text = "Select Destination",
    Callback = function(value)
        for _, location in ipairs(ProfessionalLocations) do
            local locationString = string.format("%s (%s)", location.Name, location.Category)
            if locationString == value then
                selectedLocation = location
                break
            end
        end
    end,
})

TeleportationSystem:AddButton({
    Text = "Initiate Transport",
    Func = function()
        local currentTime = tick()
        if currentTime - TeleportConfig.LastTeleport < TeleportConfig.Cooldown then
            NotificationSystem:Show("Transport System", "Please wait before next transport", 3, "warning")
            return
        end
        
        if not selectedLocation then
            NotificationSystem:Show("Transport Error", "No destination selected", 3, "error")
            return
        end

        local player = game.Players.LocalPlayer
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            NotificationSystem:Show("Transport Error", "Character not available", 3, "error")
            return
        end

        local success, err = pcall(function()
            if TeleportConfig.SafetyChecks then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                    task.wait(0.1)
                end
            end
            
            player.Character.HumanoidRootPart.CFrame = CFrame.new(selectedLocation.Position)
            
            if TeleportConfig.AnimationEnabled then
                local Animation = Instance.new("Animation", player.PlayerGui)
                Animation.AnimationId = "rbxassetid://78828590676720"
                local Character = player.Character or player.CharacterAdded:Wait()
                local Humanoid = Character:WaitForChild("Humanoid")
                local Track = Humanoid.Animator:LoadAnimation(Animation)
                Track:Play()
                task.wait(0.2)
                Track:Stop()
                Animation:Destroy()
            end
        end)

        if success then
            TeleportConfig.LastTeleport = currentTime
            NotificationSystem:Show("Transport Complete", 
                string.format("Arrived at %s", selectedLocation.Name), 3, "success")
        else
            NotificationSystem:Show("Transport Failed", 
                string.format("Error: %s", tostring(err)), 5, "error")
        end
    end,
    Tooltip = "Transport to selected destination with safety protocols"
})

local StatusMonitor = Tabs.Main:AddLeftGroupbox("System Status Monitor")

StatusMonitor:AddLabel("Real-time System Information", true)
StatusMonitor:AddDivider()

local StatusConfig = {
    UpdateInterval = 2,
    Monitoring = false,
    Stats = {
        FPS = 0,
        Ping = 0,
        Memory = 0,
        Players = 0
    }
}

local statusLabels = {}
statusLabels.fps = StatusMonitor:AddLabel("FPS: --")
statusLabels.ping = StatusMonitor:AddLabel("Ping: -- ms")
statusLabels.memory = StatusMonitor:AddLabel("Memory: -- MB")
statusLabels.players = StatusMonitor:AddLabel("Server: -- players")

StatusMonitor:AddToggle("StatusMonitoring", {
    Text = "Enable System Monitoring",
    Default = false,
    Callback = function(value)
        StatusConfig.Monitoring = value
        if value then
            task.spawn(function()
                local RunService = game:GetService("RunService")
                local Players = game:GetService("Players")
                local Stats = game:GetService("Stats")
                
                while StatusConfig.Monitoring do
                    local fps = math.floor(1 / RunService.Heartbeat:Wait())
                    StatusConfig.Stats.FPS = fps
                    
                    local ping = math.floor(Players.LocalPlayer:GetNetworkPing() * 1000)
                    StatusConfig.Stats.Ping = ping
                    
                    local memory = math.floor(Stats:GetTotalMemoryUsageMb())
                    StatusConfig.Stats.Memory = memory
                    
                    local playerCount = #Players:GetPlayers()
                    StatusConfig.Stats.Players = playerCount
                    
                    statusLabels.fps:SetText(string.format("FPS: %d", fps))
                    statusLabels.ping:SetText(string.format("Ping: %d ms", ping))
                    statusLabels.memory:SetText(string.format("Memory: %d MB", memory))
                    statusLabels.players:SetText(string.format("Server: %d players", playerCount))
                    
                    task.wait(StatusConfig.UpdateInterval)
                end
            end)
        end
    end,
    Tooltip = "Monitors system performance and server statistics"
})

local SettingsSystem = Window:AddTab("System Configuration")
local GeneralSettings = SettingsSystem:AddLeftGroupbox("General Settings")

GeneralSettings:AddLabel("Application Configuration", true)
GeneralSettings:AddDivider()

GeneralSettings:AddToggle("ProfessionalMode", {
    Text = "Professional Interface Mode",
    Default = true,
    Callback = function(value)
        if value then
            NotificationSystem:Show("Interface", "Professional mode activated", 2, "success")
        else
            NotificationSystem:Show("Interface", "Standard mode activated", 2, "success")
        end
    end,
    Tooltip = "Enables clean, professional interface styling"
})

GeneralSettings:AddSlider("NotificationDuration", {
    Text = "Notification Duration",
    Default = 3,
    Min = 1,
    Max = 10,
    Rounding = 0,
    Callback = function(value)
        NotificationSystem.DefaultDuration = value
    end,
    Tooltip = "Sets default duration for system notifications"
})

GeneralSettings:AddDropdown("ThemeSelector", {
    Values = {"Professional White", "Dark Professional", "System Default"},
    Default = "Professional White",
    Text = "Interface Theme",
    Callback = function(value)
        NotificationSystem:Show("Theme", string.format("Theme changed to %s", value), 2, "success")
    end,
    Tooltip = "Select interface color theme"
})

local PerformanceSettings = SettingsSystem:AddRightGroupbox("Performance Settings")

PerformanceSettings:AddLabel("System Optimization", true)
PerformanceSettings:AddDivider()

local PerformanceConfig = {
    OptimizedMode = false,
    ReduceEffects = false,
    LowLatency = false
}

PerformanceSettings:AddToggle("OptimizedPerformance", {
    Text = "Performance Optimization",
    Default = false,
    Callback = function(value)
        PerformanceConfig.OptimizedMode = value
        if value then
            game:GetService("RunService"):Set3dRenderingEnabled(true)
            NotificationSystem:Show("Performance", "Optimization enabled", 2, "success")
        end
    end,
    Tooltip = "Enables system performance optimizations"
})

PerformanceSettings:AddToggle("ReduceVisualEffects", {
    Text = "Reduce Visual Effects",
    Default = false,
    Callback = function(value)
        PerformanceConfig.ReduceEffects = value
        if value then
            NotificationSystem:Show("Graphics", "Visual effects reduced", 2, "success")
        end
    end,
    Tooltip = "Reduces visual effects for better performance"
})

local InfoSystem = SettingsSystem:AddLeftGroupbox("System Information")

InfoSystem:AddLabel("Application Details", true)
InfoSystem:AddDivider()

local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
InfoSystem:AddLabel(string.format("Game: %s", gameInfo.Name))
InfoSystem:AddLabel(string.format("Game ID: %d", game.PlaceId))
InfoSystem:AddLabel(string.format("Server ID: %s", game.JobId:sub(1, 8)))

local player = game:GetService("Players").LocalPlayer
InfoSystem:AddLabel(string.format("User: %s", player.Name))
InfoSystem:AddLabel(string.format("User ID: %d", player.UserId))
InfoSystem:AddLabel(string.format("Account Age: %d days", player.AccountAge))

InfoSystem:AddDivider()
InfoSystem:AddLabel("Professional Edition v3.0", true)
InfoSystem:AddLabel("Developed with advanced security protocols")
InfoSystem:AddLabel("All operations logged and monitored")

task.spawn(function()
    NotificationSystem:Show("System Startup", "Professional interface initialized", 3, "success")
    task.wait(1)
    NotificationSystem:Show("Security", "All security protocols active", 2, "success")
end)
